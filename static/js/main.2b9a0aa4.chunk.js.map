{"version":3,"sources":["components/recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","image","calories","ingredients","className","src","alt","length","map","v","i","key","text","App","useState","recipe","setrecipe","search","setsearch","query","setquery","url","useEffect","fetchrecipe","a","fetch","response","json","data","hits","console","log","type","placeholder","value","onInput","e","target","onClick","preventDefault","r","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAoBeA,G,MAlBF,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,MAAMC,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,YAElC,OACI,yBAAKC,UAAU,UACd,4BAAKJ,GACL,wCAAcE,GACd,yBAAKG,IAAKJ,EAAOK,IAAI,QACrB,2CACA,4BAAKH,EAAYI,OAAjB,gBACA,4BACEJ,EAAYK,IAAI,SAACC,EAAEC,GACb,OAAO,wBAAIC,IAAKD,GAAID,EAAEG,YCgDtBC,MAzDf,WAAe,MAGYC,mBAAS,IAHrB,mBAGNC,EAHM,KAGCC,EAHD,OAIYF,mBAAS,IAJrB,mBAING,EAJM,KAICC,EAJD,OAKUJ,mBAAS,WALnB,mBAKNK,EALM,KAKAC,EALA,KAUPC,EAAI,mCAAD,OAAoCF,EAApC,mBAFW,WAEX,oBADI,oCAKbG,oBAAU,WACTC,KACC,CAACJ,IACH,IAAMI,EAAW,sCAAC,8BAAAC,EAAA,qEACMC,MAAMJ,GADZ,cACTK,EADS,gBAEEA,EAASC,OAFX,OAETC,EAFS,OAGfZ,EAAUY,EAAKC,MACfC,QAAQC,IAAIH,EAAKC,MAJF,yCAAD,qDAejB,OACE,yBAAKzB,UAAU,OACd,yBAAKA,UAAU,UACb,yBAAKA,UAAU,aACf,0BAAOA,UAAU,eACjB,2BAAO4B,KAAK,OAAOC,YAAY,iBAAiB7B,UAAU,aAAa8B,MAAOjB,EAAQkB,QAbxE,SAACC,GACflB,EAAUkB,EAAEC,OAAOH,UAanB,4BAAQF,KAAK,SAAS5B,UAAU,gBAAgBkC,QAXtC,SAACF,GACdA,EAAEG,iBACFnB,EAASH,GACTC,EAAU,MAQP,aAIF,yBAAKd,UAAU,WACXW,EAAOP,IAAI,SAACgC,EAAE9B,GACd,OAAO,kBAAC,EAAD,CACLC,IAAKD,EACLV,MAAOwC,EAAEzB,OAAO0B,MAChBxC,MAAOuC,EAAEzB,OAAOd,MAChBC,SAAUsC,EAAEzB,OAAOb,SACnBC,YAAaqC,EAAEzB,OAAOZ,mBCzCbuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.2b9a0aa4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Recipe=({title,image,calories,ingredients})=>{\r\n\r\n  return (\r\n      <div className=\"recipe\">\r\n      \t<h1>{title}</h1>\r\n      \t<h3>Calories:{calories}</h3>\r\n      \t<img src={image} alt=\"fdf\"/>\r\n      \t<h2>Ingredients</h2>\r\n      \t<h4>{ingredients.length} ingredients</h4>\r\n      \t<ol>\r\n      \t\t{ingredients.map((v,i)=>{\r\n               return <li key={i}>{v.text}</li>\r\n      \t\t})}\r\n      \t</ol>\r\n      </div>\r\n  \t)\r\n}\r\n\r\nexport default Recipe\r\n\r\n","import React,{useEffect,useState} from 'react';\nimport './App.css'\nimport Recipe from './components/recipe'\n\nfunction App() {\n\n//use state without class\n  const [recipe,setrecipe]=useState([])\n  const [search,setsearch]=useState(\"\")\n  const [query,setquery]=useState('chicken')\n\n\n  const applicationid=\"5f0580f1\";\n  const apikey=\"7f5baba4ceaa7b37a69cf56fe35b6435\";\n  const url=`https://api.edamam.com/search?q=${query}&app_id=${applicationid}&app_key=${apikey}`\n\n  //useeffect runs everytime the page renders\n\n  useEffect(()=>{\n   fetchrecipe()\n  },[query])\n  const fetchrecipe=async ()=>{\n     const response=await fetch(url)\n     const data=await response.json()\n     setrecipe(data.hits)\n     console.log(data.hits)\n  }\n  \n  const updatesearch=(e)=>{\n       setsearch(e.target.value)\n  }\n  const getquery=(e)=>{\n    e.preventDefault()\n    setquery(search)\n    setsearch(\"\")\n  }\n  return (\n    <div className=\"App\">\n     <div className=\"header\">\n       <div className=\"container\">\n       <form  className=\"search-form\">\n       <input type=\"text\" placeholder=\"search recipes\" className=\"search-bar\" value={search} onInput={updatesearch}/>\n       <button type=\"submit\" className=\"search-button\" onClick={getquery}>Search</button>\n       </form>\n       </div>\n     </div>\n     <div className=\"recipes\">\n        {recipe.map((r,i)=>{\n         return <Recipe \n           key={i}\n           title={r.recipe.label}\n           image={r.recipe.image}\n           calories={r.recipe.calories}\n           ingredients={r.recipe.ingredients}\n        />\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}